@******************************************************************************************************************************************************************

Overall, this page was just to show that I could use blazor. That being said, it is very clear that the skill here is different from the rest of the application.
Sadly, this is also what took me the longest to do.

The problems were:
    - The architecture was not good (everything in one page, no partial views)
    - Modal would have been nicer for the edit / create to be within a modal (depends on preference, though)
    - no validation of the form
    - no good expandability/adaptability of the code base.
    - Basically utilized "states" of variables to decide some potentially hard-coded things to show.
    - Attempted to (but couldn't get to work) utilize re-usable code to "GetAllUsers".
    - Utilized -1 for userID when 0 should have been fine.
    - minor issues with delete button (however, it was noted that it would be handled a different way if it was to be a production-ready system)

What worked :
    - The code worked
    - It was documented that no validation was utilized, nor was it within the requirements.
    - Added ability to create user since this is most likely a desired functionality
    - Handled changing of labels, etc (which should have just loaded different partials, sure)

*******************************************************************************************************************************************************************@


@page "/"
@using DaveTestBlazor.Shared
@inject HttpClient Http

<PageTitle>User Listing</PageTitle>
@if (UserToEdit.UserID > 0)
{
    <h2>Edit User</h2>
}
else if (UserToEdit.UserID == 0)
{
    <h2>Add User</h2>
}
else
{
    <h2>User Listing</h2>
}


@if (Users != null){
    <button class="btn btn-success" type="button" @onclick="@(e => GetUserToEdit(0))">Create User</button>
}

@if (Users == null && UserToEdit.UserID < 0)
{
    <p><em>Loading...</em></p>
}
else if (UserToEdit.UserID >= 0)
{
    var currentUserID = UserToEdit.UserID;
    <EditForm Model=@UserToEdit OnSubmit="(e => FormSubmitted(UserToEdit))">
        <div class="container-fluid">
            <div class="row">
                <div class="col-3">
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <InputText @bind-Value=UserToEdit.FirstName class="form-control" id="FirstName" />
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <InputText @bind-Value=UserToEdit.LastName class="form-control" id="FirstName" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <div class="form-group">
                        <label for="Age">Age</label>
                        <InputNumber @bind-Value=UserToEdit.Age class="form-control" id="Age" />
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-group">
                        <label for="PhoneNumber">Phone Number</label>
                        <InputText @bind-Value=UserToEdit.PhoneNumber class="form-control" id="PhoneNumber" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label for="Address">Address</label>
                        <InputText @bind-Value=UserToEdit.Address class="form-control" id="Address" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-12">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <button class="btn btn-secondary" type="button" @onclick="OnInitializedAsync">Cancel</button>
                    @if (currentUserID > 0)
                    {
                        <button class="btn btn-danger" type="button" style="margin-left: 5px" @onclick="@(e => DeleteUser(currentUserID))">Delete</button>
                    }
                </div>
            </div>
        </div>

    </EditForm>
}
else if (Users.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Age</th>
                <th>Address</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                var currentUserID = user.UserID;
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-secondary" @onclick="@(e => GetUserToEdit(currentUserID))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                                <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                            </svg>&nbsp;&nbsp;@user.FirstName @user.LastName
                        </button>
                    </td>
                    <td>@user.Age</td>
                    <td>@user.Address</td>
                    <td>@user.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (Users.Count() == 0)
{
    <h3>No users found in database. Please create some!</h3>
}

@code {
    private List<User> Users;
    private User UserToEdit = new User();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await Http.GetFromJsonAsync<List<User>>("api/User");
            UserToEdit = new User();
        }
        catch (Exception e)
        {
            Console.Write(e.Message);
        }
    }

    private async Task GetUserToEdit(int userID)
    {
        try
        {
            UserToEdit = await Http.GetFromJsonAsync<User>("api/User/" + userID);
            Users = null;
        }
        catch (Exception e)
        {
            Console.Write(e.Message);
        }
    }

    private async Task DeleteUser(int userID)
    {
        try
        {
            await Http.DeleteAsync("api/User/" + userID);
            Users = await Http.GetFromJsonAsync<List<User>>("api/User");
            UserToEdit = new User();
        }
        catch (Exception e)
        {
            Console.Write(e.Message);
        }
    }

    private async Task FormSubmitted(User UserToSubmit)
    {
        Console.WriteLine("About to submit " + UserToEdit.UserID);
        var result = await Http.PostAsJsonAsync("api/User", UserToSubmit);
        Users = await Http.GetFromJsonAsync<List<User>>("api/User");
        UserToEdit = new User();
    }

    //private async Task GetAllUsers(){
    //    try
    //    {
    //        // grab the data for the users from the controller
    //        Users = await Http.GetFromJsonAsync<List<User>>("api/User");
    //        UserToEdit = new User();
    //    }
    //    catch (Exception e)
    //    {
    //        // is this perfect? no; however, letting the application swallow your errors is worse.
    //        Console.Write(e.Message);
    //    }
    //}

}