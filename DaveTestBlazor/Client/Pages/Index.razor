@page "/"
@using DaveTestBlazor.Shared
@inject HttpClient Http

<PageTitle>User Listing</PageTitle>
<h2>User Listing</h2>

@if (Users == null && UserToEdit.UserID == 0)
{
    <p><em>Loading...</em></p>
}
else if (UserToEdit.UserID > 0)
{
    var currentUserID = UserToEdit.UserID;
    <EditForm Model=@UserToEdit OnSubmit="(e => FormSubmitted(UserToEdit))">
        <div class="container-fluid">
            <div class="row">
                <div class="col-3">
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <InputText @bind-Value=UserToEdit.FirstName class="form-control" id="FirstName" />
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <InputText @bind-Value=UserToEdit.LastName class="form-control" id="FirstName" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <div class="form-group">
                        <label for="Age">Age</label>
                        <InputNumber @bind-Value=UserToEdit.Age class="form-control" id="Age" />
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-group">
                        <label for="PhoneNumber">Phone Number</label>
                        <InputText @bind-Value=UserToEdit.PhoneNumber class="form-control" id="PhoneNumber" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label for="Address">Address</label>
                        <InputText @bind-Value=UserToEdit.Address class="form-control" id="Address" />
                    </div>
                </div>
            </div>
            <br/>
            <div class="row">
                <div class="col-12">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <button class="btn btn-secondary" type="button" @onclick="OnInitializedAsync">Cancel</button>
                    <button class="btn btn-danger" type="button" @onclick="@(e => DeleteUser(currentUserID))">Delete</button>
                </div>
            </div>
        </div>
        
    </EditForm>



   @* var currentUserID = UserToEdit.UserID;
    <div class="container-lg container-md container-sm">
        <div class="row">
            <div class="col-12">
                <input type="text" placeholder="Name" value="@UserToEdit.FirstName">
                <input type="text" placeholder="Name" value="@UserToEdit.LastName">
                <input type="text" placeholder="Name" value="@UserToEdit.Address">
                <input type="text" placeholder="Name" value="@UserToEdit.Age">
                <input type="text" placeholder="Name" value="@UserToEdit.PhoneNumber">
                <input type="hidden" value="@UserToEdit.UserID">
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <button class="btn btn-success" type="submit">Save</button>
                <button class="btn btn-secondary" type="button" @onclick="OnInitializedAsync">Cancel</button>
                <button class="btn btn-danger" type="button" @onclick="@(e => DeleteUser(currentUserID))">Delete</button>
            </div>
        </div>
    </div>*@
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Age</th>
                <th>Address</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                var currentUserID = user.UserID;
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-secondary" @onclick="@(e => GetUserToEdit(currentUserID))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                                <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                            </svg>&nbsp;&nbsp;@user.FirstName @user.LastName
                        </button>
                    </td>
                    <td>@user.Age</td>
                    <td>@user.Address</td>
                    <td>@user.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> Users;
    private User UserToEdit = new User();

    // show the latest data for the entire user listing
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // grab the data for the users from the controller
            Users = await Http.GetFromJsonAsync<List<User>>("api/User");
            UserToEdit = new User();
        }
        catch (Exception e)
        {
            // is this perfect? no; however, letting the application swallow your errors is worse.
            Console.Write(e.Message);
        }
    }

    // get the user to edit
    private async Task GetUserToEdit(int userID)
    {
        try
        {
            UserToEdit = await Http.GetFromJsonAsync<User>("api/User/" + userID);
            Users = null;
        }
        catch (Exception e)
        {
            // is this perfect? no; however, letting the application swallow your errors is worse.
            Console.Write(e.Message);
        }
    }

    // delete the user
    private async Task DeleteUser(int userID)
    {
        try
        {
            // delete the user
            await Http.DeleteAsync("api/User/" + userID);
            // grab the data for the users from the controller
            Users = await Http.GetFromJsonAsync<List<User>>("api/User");
            UserToEdit = new User();
        }
        catch (Exception e)
        {
            // is this perfect? no; however, letting the application swallow your errors is worse.
            Console.Write(e.Message);
        }
    }

    private async Task FormSubmitted(User UserToSubmit)
    {
        Console.WriteLine("About to submit " + UserToEdit.UserID);
        var result = await Http.PostAsJsonAsync("api/User", UserToSubmit);
        Users = await Http.GetFromJsonAsync<List<User>>("api/User");
        UserToEdit = new User();
    }

    //private async Task GetAllUsers(){
    //    try
    //    {
    //        // grab the data for the users from the controller
    //        Users = await Http.GetFromJsonAsync<List<User>>("api/User");
    //        UserToEdit = new User();
    //    }
    //    catch (Exception e)
    //    {
    //        // is this perfect? no; however, letting the application swallow your errors is worse.
    //        Console.Write(e.Message);
    //    }
    //}

}